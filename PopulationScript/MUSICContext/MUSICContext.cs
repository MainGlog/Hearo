// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using PopulationScript.Models;

namespace PopulationScript.MUSICContext;

public partial class MUSICContext : DbContext
{
    public MUSICContext()
    {

    }
    public MUSICContext(DbContextOptions<MUSICContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chord> Chords { get; set; }

    public virtual DbSet<Interval> Intervals { get; set; }

    public virtual DbSet<Key> Keys { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<Scale> Scales { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        String conString = "Server=localhost;Database=MUSIC;Uid=gloggy;Pwd=SammyDean$21;";
        optionsBuilder.UseMySql(conString, ServerVersion.AutoDetect(conString));
    }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Chord>(entity =>
        {
            entity.HasKey(e => e.ChordId).HasName("PRIMARY");

            entity.ToTable("CHORD");

            entity.Property(e => e.ChordId)
                .ValueGeneratedNever()
                .HasColumnName("CHORD_ID");
            entity.Property(e => e.ChordName)
                .HasMaxLength(64)
                .HasColumnName("CHORD_NAME");
            entity.Property(e => e.ChordNotation)
                .HasMaxLength(8)
                .HasColumnName("CHORD_NOTATION");
            entity.Property(e => e.ChordQuality)
                .HasMaxLength(32)
                .HasColumnName("CHORD_QUALITY");
            entity.Property(e => e.ChordRoot)
                .HasMaxLength(4)
                .HasColumnName("CHORD_ROOT");

            entity.HasMany(d => d.Intervals).WithMany(p => p.Chords)
                .UsingEntity<Dictionary<string, object>>(
                    "ChordInterval",
                    r => r.HasOne<Interval>().WithMany()
                        .HasForeignKey("IntervalId")
                        .HasConstraintName("CHORD_INTERVAL_ibfk_2"),
                    l => l.HasOne<Chord>().WithMany()
                        .HasForeignKey("ChordId")
                        .HasConstraintName("CHORD_INTERVAL_ibfk_1"),
                    j =>
                    {
                        j.HasKey("ChordId", "IntervalId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("CHORD_INTERVAL");
                        j.HasIndex(new[] { "IntervalId" }, "INTERVAL_ID");
                        j.IndexerProperty<int>("ChordId").HasColumnName("CHORD_ID");
                        j.IndexerProperty<int>("IntervalId").HasColumnName("INTERVAL_ID");
                    });
        });

        modelBuilder.Entity<Interval>(entity =>
        {
            entity.HasKey(e => e.IntervalId).HasName("PRIMARY");

            entity.ToTable("INTERVAL");

            entity.HasIndex(e => e.IntervalNoteId, "INTERVAL_NOTE_ID");

            entity.HasIndex(e => e.RootNoteId, "ROOT_NOTE_ID");

            entity.Property(e => e.IntervalId)
                .ValueGeneratedNever()
                .HasColumnName("INTERVAL_ID");
            entity.Property(e => e.IntervalNoteId).HasColumnName("INTERVAL_NOTE_ID");
            entity.Property(e => e.IntervalQuality)
                .HasMaxLength(32)
                .HasColumnName("INTERVAL_QUALITY");
            entity.Property(e => e.IntervalSemitonesFromRoot).HasColumnName("INTERVAL_SEMITONES_FROM_ROOT");
            entity.Property(e => e.IntervalSize).HasColumnName("INTERVAL_SIZE");
            entity.Property(e => e.RootNoteId).HasColumnName("ROOT_NOTE_ID");

            entity.HasOne(d => d.IntervalNote).WithMany(p => p.IntervalIntervalNotes)
                .HasForeignKey(d => d.IntervalNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INTERVAL_ibfk_2");

            entity.HasOne(d => d.RootNote).WithMany(p => p.IntervalRootNotes)
                .HasForeignKey(d => d.RootNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INTERVAL_ibfk_1");
        });

        modelBuilder.Entity<Key>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PRIMARY");

            entity.ToTable("KEY");

            entity.Property(e => e.KeyQuality)
                .HasMaxLength(32)
                .HasColumnName("KEY_QUALITY");
            entity.Property(e => e.KeyId)
                .ValueGeneratedNever()
                .HasColumnName("KEY_ID");
            entity.Property(e => e.KeyFlatsCount).HasColumnName("KEY_FLATS_COUNT");
            entity.Property(e => e.KeyName)
                .HasMaxLength(32)
                .HasColumnName("KEY_NAME");
            entity.Property(e => e.KeyRelativeMajor)
                .HasMaxLength(4)
                .HasColumnName("KEY_RELATIVE_MAJOR");
            entity.Property(e => e.KeyRelativeMinor)
                .HasMaxLength(4)
                .HasColumnName("KEY_RELATIVE_MINOR");
            entity.Property(e => e.KeySharpsCount).HasColumnName("KEY_SHARPS_COUNT");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.NoteId).HasName("PRIMARY");

            entity.ToTable("NOTE");

            entity.Property(e => e.NoteId)
                .ValueGeneratedNever()
                .HasColumnName("NOTE_ID");
            entity.Property(e => e.NoteEnharmonic)
                .HasMaxLength(4)
                .HasColumnName("NOTE_ENHARMONIC");
            entity.Property(e => e.NoteName)
                .HasMaxLength(4)
                .HasColumnName("NOTE_NAME");
        });

        modelBuilder.Entity<Scale>(entity =>
        {
            entity.HasKey(e => e.ScaleId).HasName("PRIMARY");

            entity.ToTable("SCALE");

            entity.HasIndex(e => e.KeyId, "KEY_ID");

            entity.Property(e => e.ScaleId)
                .ValueGeneratedNever()
                .HasColumnName("SCALE_ID");
            entity.Property(e => e.KeyId).HasColumnName("KEY_ID");
            entity.Property(e => e.ScaleName)
                .HasMaxLength(64)
                .HasColumnName("SCALE_NAME");
            entity.Property(e => e.ScaleQuality)
                .HasMaxLength(32)
                .HasColumnName("SCALE_QUALITY");
            entity.Property(e => e.ScaleRoot).HasColumnName("SCALE_ROOT");

            entity.HasOne(d => d.Key).WithMany(p => p.Scales)
                .HasForeignKey(d => d.KeyId)
                .HasConstraintName("SCALE_ibfk_1");

            entity.HasMany(d => d.Intervals).WithMany(p => p.Scales)
                .UsingEntity<Dictionary<string, object>>(
                    "ScaleNote",
                    r => r.HasOne<Interval>().WithMany()
                        .HasForeignKey("IntervalId")
                        .HasConstraintName("SCALE_NOTE_ibfk_2"),
                    l => l.HasOne<Scale>().WithMany()
                        .HasForeignKey("ScaleId")
                        .HasConstraintName("SCALE_NOTE_ibfk_1"),
                    j =>
                    {
                        j.HasKey("ScaleId", "IntervalId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("SCALE_NOTE");
                        j.HasIndex(new[] { "IntervalId" }, "INTERVAL_ID");
                        j.IndexerProperty<int>("ScaleId").HasColumnName("SCALE_ID");
                        j.IndexerProperty<int>("IntervalId").HasColumnName("INTERVAL_ID");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}