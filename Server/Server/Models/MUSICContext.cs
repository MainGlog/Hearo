// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Server.Models;

public partial class MUSICContext : DbContext
{
    public MUSICContext(DbContextOptions<MUSICContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chord> Chords { get; set; }

    public virtual DbSet<Enharmonic> Enharmonics { get; set; }

    public virtual DbSet<ExerciseNote> ExerciseNotes { get; set; }

    public virtual DbSet<Interval> Intervals { get; set; }

    public virtual DbSet<Key> Keys { get; set; }

    public virtual DbSet<Note> Notes { get; set; }

    public virtual DbSet<Routine> Routines { get; set; }

    public virtual DbSet<Scale> Scales { get; set; }

    public virtual DbSet<ScaleExercise> ScaleExercises { get; set; }

    public virtual DbSet<Sound> Sounds { get; set; }
    public virtual DbSet<ScaleNote> ScaleNotes { get; set; }
    public virtual DbSet<SERoutine> SERoutines { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Chord>(entity =>
        {
            entity.HasKey(e => e.ChordId).HasName("PRIMARY");

            entity.ToTable("CHORD");

            entity.Property(e => e.ChordId)
                .ValueGeneratedNever()
                .HasColumnName("CHORD_ID");
            entity.Property(e => e.ChordName)
                .HasMaxLength(64)
                .HasColumnName("CHORD_NAME");
            entity.Property(e => e.ChordNotation)
                .HasMaxLength(16)
                .HasColumnName("CHORD_NOTATION");
            entity.Property(e => e.ChordQuality)
                .HasMaxLength(32)
                .HasColumnName("CHORD_QUALITY");
            entity.Property(e => e.ChordRoot)
                .HasMaxLength(4)
                .HasColumnName("CHORD_ROOT");

            entity.HasMany(d => d.Intervals).WithMany(p => p.Chords)
                .UsingEntity<Dictionary<string, object>>(
                    "ChordInterval",
                    r => r.HasOne<Interval>().WithMany()
                        .HasForeignKey("IntervalId")
                        .HasConstraintName("CHORD_INTERVAL_ibfk_2"),
                    l => l.HasOne<Chord>().WithMany()
                        .HasForeignKey("ChordId")
                        .HasConstraintName("CHORD_INTERVAL_ibfk_1"),
                    j =>
                    {
                        j.HasKey("ChordId", "IntervalId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("CHORD_INTERVAL");
                        j.HasIndex(new[] { "IntervalId" }, "INTERVAL_ID");
                        j.IndexerProperty<int>("ChordId").HasColumnName("CHORD_ID");
                        j.IndexerProperty<int>("IntervalId").HasColumnName("INTERVAL_ID");
                    });
        });

        modelBuilder.Entity<Enharmonic>(entity =>
        {
            entity.HasKey(e => e.EnharmonicId).HasName("PRIMARY");

            entity.ToTable("ENHARMONIC");

            entity.Property(e => e.EnharmonicId)
                .ValueGeneratedNever()
                .HasColumnName("ENHARMONIC_ID");
            entity.Property(e => e.EnharmonicName)
                .HasMaxLength(4)
                .HasColumnName("ENHARMONIC_NAME");
        });

        modelBuilder.Entity<ExerciseNote>(entity =>
        {
            entity.HasKey(e => new { e.ScaleExerciseId, e.NoteId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("EXERCISE_NOTES");

            entity.HasIndex(e => e.NoteId, "NOTE_ID");

            entity.Property(e => e.ScaleExerciseId).HasColumnName("SCALE_EXERCISE_ID");
            entity.Property(e => e.NoteId).HasColumnName("NOTE_ID");
            entity.Property(e => e.NoteOrderNumber).HasColumnName("NOTE_ORDER_NUMBER");

            entity.HasOne(d => d.Note).WithMany(p => p.ExerciseNotes)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EXERCISE_NOTES_ibfk_2");

            entity.HasOne(d => d.ScaleExercise).WithMany(p => p.ExerciseNotes)
                .HasForeignKey(d => d.ScaleExerciseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EXERCISE_NOTES_ibfk_1");


        });

        modelBuilder.Entity<Interval>(entity =>
        {
            entity.HasKey(e => e.IntervalId).HasName("PRIMARY");

            entity.ToTable("INTERVAL");

            entity.HasIndex(e => e.IntervalNoteId, "INTERVAL_NOTE_ID");

            entity.HasIndex(e => e.RootNoteId, "ROOT_NOTE_ID");

            entity.Property(e => e.IntervalId)
                .ValueGeneratedNever()
                .HasColumnName("INTERVAL_ID");
            entity.Property(e => e.IntervalNoteId).HasColumnName("INTERVAL_NOTE_ID");
            entity.Property(e => e.IntervalQuality)
                .HasMaxLength(32)
                .HasColumnName("INTERVAL_QUALITY");
            entity.Property(e => e.IntervalSemitonesFromRoot).HasColumnName("INTERVAL_SEMITONES_FROM_ROOT");
            entity.Property(e => e.IntervalSize).HasColumnName("INTERVAL_SIZE");
            entity.Property(e => e.RootNoteId).HasColumnName("ROOT_NOTE_ID");

            entity.HasOne(d => d.IntervalNote).WithMany(p => p.IntervalIntervalNotes)
                .HasForeignKey(d => d.IntervalNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INTERVAL_ibfk_2");

            entity.HasOne(d => d.RootNote).WithMany(p => p.IntervalRootNotes)
                .HasForeignKey(d => d.RootNoteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("INTERVAL_ibfk_1");
        });


        // NOT AUTO GENERATED
        modelBuilder.Entity<ScaleNote>(entity =>
        {
            entity.HasKey(e => new { e.ScaleId, e.IntervalId });

            entity.ToTable("SCALE_NOTE");

            entity.HasIndex(e => e.IntervalId, "INTERVAL_ID");

            entity.Property(e => e.ScaleId).HasColumnName("SCALE_ID");
            entity.Property(e => e.IntervalId).HasColumnName("INTERVAL_ID");

            entity.HasOne(e => e.Scale)
                .WithMany(s => s.ScaleNotes)
                .HasForeignKey(e => e.ScaleId)
                .HasConstraintName("SCALE_NOTE_ibfk_1");

            entity.HasOne(e => e.Interval)
                .WithMany(i => i.ScaleNotes)
                .HasForeignKey(e => e.IntervalId)
                .HasConstraintName("SCALE_NOTE_ibfk_2");
        });

        modelBuilder.Entity<SERoutine>(entity =>
        {
            entity.HasKey("ScaleExerciseId", "RoutineId").HasName("PRIMARY");

            entity.ToTable("SCALE_EXERCISE_ROUTINE");

            entity.HasIndex(e => e.RoutineId).HasDatabaseName("ROUTINE_ID");

            entity.Property(e => e.ScaleExerciseId).HasColumnName("SCALE_EXERCISE_ID");
            entity.Property(e => e.RoutineId).HasColumnName("ROUTINE_ID");

            entity.HasOne(e => e.ScaleExercise)
                .WithMany(e => e.SERoutines)
                .HasForeignKey(e => e.ScaleExerciseId)
                .OnDelete(DeleteBehavior.NoAction)
                .HasConstraintName("SCALE_EXERCISE_ROUTINE_ibfk_1");

            entity.HasOne(e => e.Routine)
                .WithMany(e => e.SERoutines)
                .HasForeignKey(e => e.RoutineId)
                .OnDelete(DeleteBehavior.NoAction)
                .HasConstraintName("SCALE_EXERCISE_ROUTINE_ibfk_2");
        });

        modelBuilder.Entity<Key>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PRIMARY");

            entity.ToTable("KEY");

            entity.Property(e => e.KeyId)
                .ValueGeneratedNever()
                .HasColumnName("KEY_ID");
            entity.Property(e => e.KeyDoubleFlatsCount).HasColumnName("KEY_DOUBLE_FLATS_COUNT");
            entity.Property(e => e.KeyDoubleSharpsCount).HasColumnName("KEY_DOUBLE_SHARPS_COUNT");
            entity.Property(e => e.KeyFlatsCount).HasColumnName("KEY_FLATS_COUNT");
            entity.Property(e => e.KeyName)
                .HasMaxLength(32)
                .HasColumnName("KEY_NAME");
            entity.Property(e => e.KeyQuality)
                .HasMaxLength(16)
                .HasColumnName("KEY_QUALITY");
            entity.Property(e => e.KeyRelativeMajor)
                .HasMaxLength(4)
                .HasColumnName("KEY_RELATIVE_MAJOR");
            entity.Property(e => e.KeyRelativeMinor)
                .HasMaxLength(4)
                .HasColumnName("KEY_RELATIVE_MINOR");
            entity.Property(e => e.KeySharpsCount).HasColumnName("KEY_SHARPS_COUNT");
        });

        modelBuilder.Entity<Note>(entity =>
        {
            entity.HasKey(e => e.NoteId).HasName("PRIMARY");

            entity.ToTable("NOTE");

            entity.Property(e => e.NoteId)
                .ValueGeneratedNever()
                .HasColumnName("NOTE_ID");
            entity.Property(e => e.NoteName)
                .HasMaxLength(4)
                .HasColumnName("NOTE_NAME");

            entity.HasMany(d => d.Enharmonics).WithMany(p => p.Notes)
                .UsingEntity<Dictionary<string, object>>(
                    "NoteEnharmonic",
                    r => r.HasOne<Enharmonic>().WithMany()
                        .HasForeignKey("EnharmonicId")
                        .HasConstraintName("NOTE_ENHARMONIC_ibfk_2"),
                    l => l.HasOne<Note>().WithMany()
                        .HasForeignKey("NoteId")
                        .HasConstraintName("NOTE_ENHARMONIC_ibfk_1"),
                    j =>
                    {
                        j.HasKey("NoteId", "EnharmonicId")
                            .HasName("PRIMARY")
                            .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });
                        j.ToTable("NOTE_ENHARMONIC");
                        j.HasIndex(new[] { "EnharmonicId" }, "ENHARMONIC_ID");
                        j.IndexerProperty<int>("NoteId").HasColumnName("NOTE_ID");
                        j.IndexerProperty<int>("EnharmonicId").HasColumnName("ENHARMONIC_ID");
                    });
        });

        modelBuilder.Entity<Routine>(entity =>
        {
            entity.HasKey(e => e.RoutineId).HasName("PRIMARY");

            entity.ToTable("ROUTINE");

            entity.Property(e => e.RoutineDescription)
                .HasMaxLength(256)
                .HasColumnName("ROUTINE_DESCRIPTION");

            entity.Property(e => e.RoutineId)
                .ValueGeneratedNever()
                .HasColumnName("ROUTINE_ID");
            entity.Property(e => e.RoutineExerciseCount).HasColumnName("ROUTINE_EXERCISE_COUNT");
            entity.Property(e => e.RoutineName)
                .HasMaxLength(256)
                .HasColumnName("ROUTINE_NAME");
            entity.Property(e => e.RoutineTimeToGuess).HasColumnName("ROUTINE_TIME_TO_GUESS");
        });

        modelBuilder.Entity<Scale>(entity =>
        {
            entity.HasKey(e => e.ScaleId).HasName("PRIMARY");

            entity.ToTable("SCALE");

            entity.HasIndex(e => e.KeyId, "KEY_ID");

            entity.Property(e => e.ScaleId)
                .ValueGeneratedNever()
                .HasColumnName("SCALE_ID");
            entity.Property(e => e.KeyId).HasColumnName("KEY_ID");
            entity.Property(e => e.ScaleName)
                .HasMaxLength(64)
                .HasColumnName("SCALE_NAME");
            entity.Property(e => e.ScaleQuality)
                .HasMaxLength(32)
                .HasColumnName("SCALE_QUALITY");
            entity.Property(e => e.ScaleRoot)
                .HasMaxLength(4)
                .HasColumnName("SCALE_ROOT");

            entity.HasOne(d => d.Key).WithMany(p => p.Scales)
                .HasForeignKey(d => d.KeyId)
                .HasConstraintName("SCALE_ibfk_1");
        });

        modelBuilder.Entity<ScaleExercise>(entity =>
        {
            entity.HasKey(e => e.ScaleExerciseId).HasName("PRIMARY");

            entity.ToTable("SCALE_EXERCISE");

            entity.HasIndex(e => e.ScaleId, "SCALE_ID");

            entity.Property(e => e.ScaleExerciseId)
                .ValueGeneratedNever()
                .HasColumnName("SCALE_EXERCISE_ID");
            entity.Property(e => e.ListeningMode)
                .HasMaxLength(64)
                .HasColumnName("LISTENING_MODE");
            entity.Property(e => e.NumberOfNotes).HasColumnName("NUMBER_OF_NOTES");
            entity.Property(e => e.NumberOfOctaves).HasColumnName("NUMBER_OF_OCTAVES");
            entity.Property(e => e.ScaleId).HasColumnName("SCALE_ID");
            entity.Property(e => e.TimePerNote).HasColumnName("TIME_PER_NOTE");

            entity.HasOne(d => d.Scale).WithMany(p => p.ScaleExercises)
                .HasForeignKey(d => d.ScaleId)
                .HasConstraintName("SCALE_EXERCISE_ibfk_1");
        });

        modelBuilder.Entity<Sound>(entity =>
        {
            entity.HasKey(e => e.SoundId).HasName("PRIMARY");

            entity.ToTable("SOUND");

            entity.HasIndex(e => e.NoteId, "NOTE_ID");

            entity.Property(e => e.SoundId)
                .ValueGeneratedNever()
                .HasColumnName("SOUND_ID");
            entity.Property(e => e.NoteId).HasColumnName("NOTE_ID");
            entity.Property(e => e.SoundFilePath)
                .HasMaxLength(128)
                .HasColumnName("SOUND_FILE_PATH");
            entity.Property(e => e.SoundOctave).HasColumnName("SOUND_OCTAVE");

            entity.HasOne(d => d.Note).WithMany(p => p.Sounds)
                .HasForeignKey(d => d.NoteId)
                .HasConstraintName("SOUND_ibfk_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}